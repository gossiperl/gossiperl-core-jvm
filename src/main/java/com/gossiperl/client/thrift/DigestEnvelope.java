/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gossiperl.client.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DigestEnvelope implements org.apache.thrift.TBase<DigestEnvelope, DigestEnvelope._Fields>, java.io.Serializable, Cloneable, Comparable<DigestEnvelope> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DigestEnvelope");

  private static final org.apache.thrift.protocol.TField PAYLOAD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payload_type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BIN_PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("bin_payload", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DigestEnvelopeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DigestEnvelopeTupleSchemeFactory());
  }

  public String payload_type; // required
  public String bin_payload; // required
  public String id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAYLOAD_TYPE((short)1, "payload_type"),
    BIN_PAYLOAD((short)2, "bin_payload"),
    ID((short)3, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAYLOAD_TYPE
          return PAYLOAD_TYPE;
        case 2: // BIN_PAYLOAD
          return BIN_PAYLOAD;
        case 3: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAYLOAD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payload_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIN_PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("bin_payload", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DigestEnvelope.class, metaDataMap);
  }

  public DigestEnvelope() {
  }

  public DigestEnvelope(
    String payload_type,
    String bin_payload,
    String id)
  {
    this();
    this.payload_type = payload_type;
    this.bin_payload = bin_payload;
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DigestEnvelope(DigestEnvelope other) {
    if (other.isSetPayload_type()) {
      this.payload_type = other.payload_type;
    }
    if (other.isSetBin_payload()) {
      this.bin_payload = other.bin_payload;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
  }

  public DigestEnvelope deepCopy() {
    return new DigestEnvelope(this);
  }

  @Override
  public void clear() {
    this.payload_type = null;
    this.bin_payload = null;
    this.id = null;
  }

  public String getPayload_type() {
    return this.payload_type;
  }

  public DigestEnvelope setPayload_type(String payload_type) {
    this.payload_type = payload_type;
    return this;
  }

  public void unsetPayload_type() {
    this.payload_type = null;
  }

  /** Returns true if field payload_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPayload_type() {
    return this.payload_type != null;
  }

  public void setPayload_typeIsSet(boolean value) {
    if (!value) {
      this.payload_type = null;
    }
  }

  public String getBin_payload() {
    return this.bin_payload;
  }

  public DigestEnvelope setBin_payload(String bin_payload) {
    this.bin_payload = bin_payload;
    return this;
  }

  public void unsetBin_payload() {
    this.bin_payload = null;
  }

  /** Returns true if field bin_payload is set (has been assigned a value) and false otherwise */
  public boolean isSetBin_payload() {
    return this.bin_payload != null;
  }

  public void setBin_payloadIsSet(boolean value) {
    if (!value) {
      this.bin_payload = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public DigestEnvelope setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAYLOAD_TYPE:
      if (value == null) {
        unsetPayload_type();
      } else {
        setPayload_type((String)value);
      }
      break;

    case BIN_PAYLOAD:
      if (value == null) {
        unsetBin_payload();
      } else {
        setBin_payload((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAYLOAD_TYPE:
      return getPayload_type();

    case BIN_PAYLOAD:
      return getBin_payload();

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAYLOAD_TYPE:
      return isSetPayload_type();
    case BIN_PAYLOAD:
      return isSetBin_payload();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DigestEnvelope)
      return this.equals((DigestEnvelope)that);
    return false;
  }

  public boolean equals(DigestEnvelope that) {
    if (that == null)
      return false;

    boolean this_present_payload_type = true && this.isSetPayload_type();
    boolean that_present_payload_type = true && that.isSetPayload_type();
    if (this_present_payload_type || that_present_payload_type) {
      if (!(this_present_payload_type && that_present_payload_type))
        return false;
      if (!this.payload_type.equals(that.payload_type))
        return false;
    }

    boolean this_present_bin_payload = true && this.isSetBin_payload();
    boolean that_present_bin_payload = true && that.isSetBin_payload();
    if (this_present_bin_payload || that_present_bin_payload) {
      if (!(this_present_bin_payload && that_present_bin_payload))
        return false;
      if (!this.bin_payload.equals(that.bin_payload))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DigestEnvelope other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPayload_type()).compareTo(other.isSetPayload_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayload_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload_type, other.payload_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBin_payload()).compareTo(other.isSetBin_payload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBin_payload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin_payload, other.bin_payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DigestEnvelope(");
    boolean first = true;

    sb.append("payload_type:");
    if (this.payload_type == null) {
      sb.append("null");
    } else {
      sb.append(this.payload_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bin_payload:");
    if (this.bin_payload == null) {
      sb.append("null");
    } else {
      sb.append(this.bin_payload);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (payload_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'payload_type' was not present! Struct: " + toString());
    }
    if (bin_payload == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bin_payload' was not present! Struct: " + toString());
    }
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DigestEnvelopeStandardSchemeFactory implements SchemeFactory {
    public DigestEnvelopeStandardScheme getScheme() {
      return new DigestEnvelopeStandardScheme();
    }
  }

  private static class DigestEnvelopeStandardScheme extends StandardScheme<DigestEnvelope> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DigestEnvelope struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAYLOAD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payload_type = iprot.readString();
              struct.setPayload_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BIN_PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bin_payload = iprot.readString();
              struct.setBin_payloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DigestEnvelope struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.payload_type != null) {
        oprot.writeFieldBegin(PAYLOAD_TYPE_FIELD_DESC);
        oprot.writeString(struct.payload_type);
        oprot.writeFieldEnd();
      }
      if (struct.bin_payload != null) {
        oprot.writeFieldBegin(BIN_PAYLOAD_FIELD_DESC);
        oprot.writeString(struct.bin_payload);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DigestEnvelopeTupleSchemeFactory implements SchemeFactory {
    public DigestEnvelopeTupleScheme getScheme() {
      return new DigestEnvelopeTupleScheme();
    }
  }

  private static class DigestEnvelopeTupleScheme extends TupleScheme<DigestEnvelope> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DigestEnvelope struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.payload_type);
      oprot.writeString(struct.bin_payload);
      oprot.writeString(struct.id);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DigestEnvelope struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.payload_type = iprot.readString();
      struct.setPayload_typeIsSet(true);
      struct.bin_payload = iprot.readString();
      struct.setBin_payloadIsSet(true);
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
    }
  }

}

