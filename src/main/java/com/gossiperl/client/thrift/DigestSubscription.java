/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gossiperl.client.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DigestSubscription implements org.apache.thrift.TBase<DigestSubscription, DigestSubscription._Fields>, java.io.Serializable, Cloneable, Comparable<DigestSubscription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DigestSubscription");

  private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("event_type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("member_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HEARTBEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("heartbeat", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DigestSubscriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DigestSubscriptionTupleSchemeFactory());
  }

  public String event_type; // required
  public String member_name; // required
  public String origin; // required
  public long heartbeat; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT_TYPE((short)1, "event_type"),
    MEMBER_NAME((short)2, "member_name"),
    ORIGIN((short)3, "origin"),
    HEARTBEAT((short)4, "heartbeat");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT_TYPE
          return EVENT_TYPE;
        case 2: // MEMBER_NAME
          return MEMBER_NAME;
        case 3: // ORIGIN
          return ORIGIN;
        case 4: // HEARTBEAT
          return HEARTBEAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HEARTBEAT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("event_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("member_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEARTBEAT, new org.apache.thrift.meta_data.FieldMetaData("heartbeat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DigestSubscription.class, metaDataMap);
  }

  public DigestSubscription() {
  }

  public DigestSubscription(
    String event_type,
    String member_name,
    String origin,
    long heartbeat)
  {
    this();
    this.event_type = event_type;
    this.member_name = member_name;
    this.origin = origin;
    this.heartbeat = heartbeat;
    setHeartbeatIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DigestSubscription(DigestSubscription other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEvent_type()) {
      this.event_type = other.event_type;
    }
    if (other.isSetMember_name()) {
      this.member_name = other.member_name;
    }
    if (other.isSetOrigin()) {
      this.origin = other.origin;
    }
    this.heartbeat = other.heartbeat;
  }

  public DigestSubscription deepCopy() {
    return new DigestSubscription(this);
  }

  @Override
  public void clear() {
    this.event_type = null;
    this.member_name = null;
    this.origin = null;
    setHeartbeatIsSet(false);
    this.heartbeat = 0;
  }

  public String getEvent_type() {
    return this.event_type;
  }

  public DigestSubscription setEvent_type(String event_type) {
    this.event_type = event_type;
    return this;
  }

  public void unsetEvent_type() {
    this.event_type = null;
  }

  /** Returns true if field event_type is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_type() {
    return this.event_type != null;
  }

  public void setEvent_typeIsSet(boolean value) {
    if (!value) {
      this.event_type = null;
    }
  }

  public String getMember_name() {
    return this.member_name;
  }

  public DigestSubscription setMember_name(String member_name) {
    this.member_name = member_name;
    return this;
  }

  public void unsetMember_name() {
    this.member_name = null;
  }

  /** Returns true if field member_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMember_name() {
    return this.member_name != null;
  }

  public void setMember_nameIsSet(boolean value) {
    if (!value) {
      this.member_name = null;
    }
  }

  public String getOrigin() {
    return this.origin;
  }

  public DigestSubscription setOrigin(String origin) {
    this.origin = origin;
    return this;
  }

  public void unsetOrigin() {
    this.origin = null;
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return this.origin != null;
  }

  public void setOriginIsSet(boolean value) {
    if (!value) {
      this.origin = null;
    }
  }

  public long getHeartbeat() {
    return this.heartbeat;
  }

  public DigestSubscription setHeartbeat(long heartbeat) {
    this.heartbeat = heartbeat;
    setHeartbeatIsSet(true);
    return this;
  }

  public void unsetHeartbeat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEARTBEAT_ISSET_ID);
  }

  /** Returns true if field heartbeat is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartbeat() {
    return EncodingUtils.testBit(__isset_bitfield, __HEARTBEAT_ISSET_ID);
  }

  public void setHeartbeatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEARTBEAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT_TYPE:
      if (value == null) {
        unsetEvent_type();
      } else {
        setEvent_type((String)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMember_name();
      } else {
        setMember_name((String)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((String)value);
      }
      break;

    case HEARTBEAT:
      if (value == null) {
        unsetHeartbeat();
      } else {
        setHeartbeat((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT_TYPE:
      return getEvent_type();

    case MEMBER_NAME:
      return getMember_name();

    case ORIGIN:
      return getOrigin();

    case HEARTBEAT:
      return Long.valueOf(getHeartbeat());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT_TYPE:
      return isSetEvent_type();
    case MEMBER_NAME:
      return isSetMember_name();
    case ORIGIN:
      return isSetOrigin();
    case HEARTBEAT:
      return isSetHeartbeat();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DigestSubscription)
      return this.equals((DigestSubscription)that);
    return false;
  }

  public boolean equals(DigestSubscription that) {
    if (that == null)
      return false;

    boolean this_present_event_type = true && this.isSetEvent_type();
    boolean that_present_event_type = true && that.isSetEvent_type();
    if (this_present_event_type || that_present_event_type) {
      if (!(this_present_event_type && that_present_event_type))
        return false;
      if (!this.event_type.equals(that.event_type))
        return false;
    }

    boolean this_present_member_name = true && this.isSetMember_name();
    boolean that_present_member_name = true && that.isSetMember_name();
    if (this_present_member_name || that_present_member_name) {
      if (!(this_present_member_name && that_present_member_name))
        return false;
      if (!this.member_name.equals(that.member_name))
        return false;
    }

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (!this.origin.equals(that.origin))
        return false;
    }

    boolean this_present_heartbeat = true;
    boolean that_present_heartbeat = true;
    if (this_present_heartbeat || that_present_heartbeat) {
      if (!(this_present_heartbeat && that_present_heartbeat))
        return false;
      if (this.heartbeat != that.heartbeat)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DigestSubscription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEvent_type()).compareTo(other.isSetEvent_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_type, other.event_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMember_name()).compareTo(other.isSetMember_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMember_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member_name, other.member_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(other.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartbeat()).compareTo(other.isSetHeartbeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartbeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartbeat, other.heartbeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DigestSubscription(");
    boolean first = true;

    sb.append("event_type:");
    if (this.event_type == null) {
      sb.append("null");
    } else {
      sb.append(this.event_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("member_name:");
    if (this.member_name == null) {
      sb.append("null");
    } else {
      sb.append(this.member_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("origin:");
    if (this.origin == null) {
      sb.append("null");
    } else {
      sb.append(this.origin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("heartbeat:");
    sb.append(this.heartbeat);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (event_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'event_type' was not present! Struct: " + toString());
    }
    if (member_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'member_name' was not present! Struct: " + toString());
    }
    if (origin == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'origin' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'heartbeat' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DigestSubscriptionStandardSchemeFactory implements SchemeFactory {
    public DigestSubscriptionStandardScheme getScheme() {
      return new DigestSubscriptionStandardScheme();
    }
  }

  private static class DigestSubscriptionStandardScheme extends StandardScheme<DigestSubscription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DigestSubscription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EVENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event_type = iprot.readString();
              struct.setEvent_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.member_name = iprot.readString();
              struct.setMember_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.origin = iprot.readString();
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEARTBEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.heartbeat = iprot.readI64();
              struct.setHeartbeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetHeartbeat()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'heartbeat' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DigestSubscription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.event_type != null) {
        oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.event_type);
        oprot.writeFieldEnd();
      }
      if (struct.member_name != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.member_name);
        oprot.writeFieldEnd();
      }
      if (struct.origin != null) {
        oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
        oprot.writeString(struct.origin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEARTBEAT_FIELD_DESC);
      oprot.writeI64(struct.heartbeat);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DigestSubscriptionTupleSchemeFactory implements SchemeFactory {
    public DigestSubscriptionTupleScheme getScheme() {
      return new DigestSubscriptionTupleScheme();
    }
  }

  private static class DigestSubscriptionTupleScheme extends TupleScheme<DigestSubscription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DigestSubscription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.event_type);
      oprot.writeString(struct.member_name);
      oprot.writeString(struct.origin);
      oprot.writeI64(struct.heartbeat);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DigestSubscription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.event_type = iprot.readString();
      struct.setEvent_typeIsSet(true);
      struct.member_name = iprot.readString();
      struct.setMember_nameIsSet(true);
      struct.origin = iprot.readString();
      struct.setOriginIsSet(true);
      struct.heartbeat = iprot.readI64();
      struct.setHeartbeatIsSet(true);
    }
  }

}

