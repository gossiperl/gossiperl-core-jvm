/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gossiperl.client.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DigestMember implements org.apache.thrift.TBase<DigestMember, DigestMember._Fields>, java.io.Serializable, Cloneable, Comparable<DigestMember> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DigestMember");

  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("member_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("member_ip", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("member_port", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MEMBER_HEARTBEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("member_heartbeat", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DigestMemberStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DigestMemberTupleSchemeFactory());
  }

  public String member_name; // required
  public String member_ip; // required
  public int member_port; // required
  public long member_heartbeat; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEMBER_NAME((short)1, "member_name"),
    MEMBER_IP((short)2, "member_ip"),
    MEMBER_PORT((short)3, "member_port"),
    MEMBER_HEARTBEAT((short)4, "member_heartbeat");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMBER_NAME
          return MEMBER_NAME;
        case 2: // MEMBER_IP
          return MEMBER_IP;
        case 3: // MEMBER_PORT
          return MEMBER_PORT;
        case 4: // MEMBER_HEARTBEAT
          return MEMBER_HEARTBEAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBER_PORT_ISSET_ID = 0;
  private static final int __MEMBER_HEARTBEAT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("member_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_IP, new org.apache.thrift.meta_data.FieldMetaData("member_ip", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_PORT, new org.apache.thrift.meta_data.FieldMetaData("member_port", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMBER_HEARTBEAT, new org.apache.thrift.meta_data.FieldMetaData("member_heartbeat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DigestMember.class, metaDataMap);
  }

  public DigestMember() {
  }

  public DigestMember(
    String member_name,
    String member_ip,
    int member_port,
    long member_heartbeat)
  {
    this();
    this.member_name = member_name;
    this.member_ip = member_ip;
    this.member_port = member_port;
    setMember_portIsSet(true);
    this.member_heartbeat = member_heartbeat;
    setMember_heartbeatIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DigestMember(DigestMember other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMember_name()) {
      this.member_name = other.member_name;
    }
    if (other.isSetMember_ip()) {
      this.member_ip = other.member_ip;
    }
    this.member_port = other.member_port;
    this.member_heartbeat = other.member_heartbeat;
  }

  public DigestMember deepCopy() {
    return new DigestMember(this);
  }

  @Override
  public void clear() {
    this.member_name = null;
    this.member_ip = null;
    setMember_portIsSet(false);
    this.member_port = 0;
    setMember_heartbeatIsSet(false);
    this.member_heartbeat = 0;
  }

  public String getMember_name() {
    return this.member_name;
  }

  public DigestMember setMember_name(String member_name) {
    this.member_name = member_name;
    return this;
  }

  public void unsetMember_name() {
    this.member_name = null;
  }

  /** Returns true if field member_name is set (has been assigned a value) and false otherwise */
  public boolean isSetMember_name() {
    return this.member_name != null;
  }

  public void setMember_nameIsSet(boolean value) {
    if (!value) {
      this.member_name = null;
    }
  }

  public String getMember_ip() {
    return this.member_ip;
  }

  public DigestMember setMember_ip(String member_ip) {
    this.member_ip = member_ip;
    return this;
  }

  public void unsetMember_ip() {
    this.member_ip = null;
  }

  /** Returns true if field member_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetMember_ip() {
    return this.member_ip != null;
  }

  public void setMember_ipIsSet(boolean value) {
    if (!value) {
      this.member_ip = null;
    }
  }

  public int getMember_port() {
    return this.member_port;
  }

  public DigestMember setMember_port(int member_port) {
    this.member_port = member_port;
    setMember_portIsSet(true);
    return this;
  }

  public void unsetMember_port() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBER_PORT_ISSET_ID);
  }

  /** Returns true if field member_port is set (has been assigned a value) and false otherwise */
  public boolean isSetMember_port() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBER_PORT_ISSET_ID);
  }

  public void setMember_portIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBER_PORT_ISSET_ID, value);
  }

  public long getMember_heartbeat() {
    return this.member_heartbeat;
  }

  public DigestMember setMember_heartbeat(long member_heartbeat) {
    this.member_heartbeat = member_heartbeat;
    setMember_heartbeatIsSet(true);
    return this;
  }

  public void unsetMember_heartbeat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBER_HEARTBEAT_ISSET_ID);
  }

  /** Returns true if field member_heartbeat is set (has been assigned a value) and false otherwise */
  public boolean isSetMember_heartbeat() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBER_HEARTBEAT_ISSET_ID);
  }

  public void setMember_heartbeatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBER_HEARTBEAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMBER_NAME:
      if (value == null) {
        unsetMember_name();
      } else {
        setMember_name((String)value);
      }
      break;

    case MEMBER_IP:
      if (value == null) {
        unsetMember_ip();
      } else {
        setMember_ip((String)value);
      }
      break;

    case MEMBER_PORT:
      if (value == null) {
        unsetMember_port();
      } else {
        setMember_port((Integer)value);
      }
      break;

    case MEMBER_HEARTBEAT:
      if (value == null) {
        unsetMember_heartbeat();
      } else {
        setMember_heartbeat((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMBER_NAME:
      return getMember_name();

    case MEMBER_IP:
      return getMember_ip();

    case MEMBER_PORT:
      return Integer.valueOf(getMember_port());

    case MEMBER_HEARTBEAT:
      return Long.valueOf(getMember_heartbeat());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMBER_NAME:
      return isSetMember_name();
    case MEMBER_IP:
      return isSetMember_ip();
    case MEMBER_PORT:
      return isSetMember_port();
    case MEMBER_HEARTBEAT:
      return isSetMember_heartbeat();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DigestMember)
      return this.equals((DigestMember)that);
    return false;
  }

  public boolean equals(DigestMember that) {
    if (that == null)
      return false;

    boolean this_present_member_name = true && this.isSetMember_name();
    boolean that_present_member_name = true && that.isSetMember_name();
    if (this_present_member_name || that_present_member_name) {
      if (!(this_present_member_name && that_present_member_name))
        return false;
      if (!this.member_name.equals(that.member_name))
        return false;
    }

    boolean this_present_member_ip = true && this.isSetMember_ip();
    boolean that_present_member_ip = true && that.isSetMember_ip();
    if (this_present_member_ip || that_present_member_ip) {
      if (!(this_present_member_ip && that_present_member_ip))
        return false;
      if (!this.member_ip.equals(that.member_ip))
        return false;
    }

    boolean this_present_member_port = true;
    boolean that_present_member_port = true;
    if (this_present_member_port || that_present_member_port) {
      if (!(this_present_member_port && that_present_member_port))
        return false;
      if (this.member_port != that.member_port)
        return false;
    }

    boolean this_present_member_heartbeat = true;
    boolean that_present_member_heartbeat = true;
    if (this_present_member_heartbeat || that_present_member_heartbeat) {
      if (!(this_present_member_heartbeat && that_present_member_heartbeat))
        return false;
      if (this.member_heartbeat != that.member_heartbeat)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DigestMember other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMember_name()).compareTo(other.isSetMember_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMember_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member_name, other.member_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMember_ip()).compareTo(other.isSetMember_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMember_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member_ip, other.member_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMember_port()).compareTo(other.isSetMember_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMember_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member_port, other.member_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMember_heartbeat()).compareTo(other.isSetMember_heartbeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMember_heartbeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member_heartbeat, other.member_heartbeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DigestMember(");
    boolean first = true;

    sb.append("member_name:");
    if (this.member_name == null) {
      sb.append("null");
    } else {
      sb.append(this.member_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("member_ip:");
    if (this.member_ip == null) {
      sb.append("null");
    } else {
      sb.append(this.member_ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("member_port:");
    sb.append(this.member_port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("member_heartbeat:");
    sb.append(this.member_heartbeat);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (member_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'member_name' was not present! Struct: " + toString());
    }
    if (member_ip == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'member_ip' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'member_port' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'member_heartbeat' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DigestMemberStandardSchemeFactory implements SchemeFactory {
    public DigestMemberStandardScheme getScheme() {
      return new DigestMemberStandardScheme();
    }
  }

  private static class DigestMemberStandardScheme extends StandardScheme<DigestMember> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DigestMember struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.member_name = iprot.readString();
              struct.setMember_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.member_ip = iprot.readString();
              struct.setMember_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.member_port = iprot.readI32();
              struct.setMember_portIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEMBER_HEARTBEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.member_heartbeat = iprot.readI64();
              struct.setMember_heartbeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMember_port()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'member_port' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMember_heartbeat()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'member_heartbeat' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DigestMember struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.member_name != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.member_name);
        oprot.writeFieldEnd();
      }
      if (struct.member_ip != null) {
        oprot.writeFieldBegin(MEMBER_IP_FIELD_DESC);
        oprot.writeString(struct.member_ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_PORT_FIELD_DESC);
      oprot.writeI32(struct.member_port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMBER_HEARTBEAT_FIELD_DESC);
      oprot.writeI64(struct.member_heartbeat);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DigestMemberTupleSchemeFactory implements SchemeFactory {
    public DigestMemberTupleScheme getScheme() {
      return new DigestMemberTupleScheme();
    }
  }

  private static class DigestMemberTupleScheme extends TupleScheme<DigestMember> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DigestMember struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.member_name);
      oprot.writeString(struct.member_ip);
      oprot.writeI32(struct.member_port);
      oprot.writeI64(struct.member_heartbeat);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DigestMember struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.member_name = iprot.readString();
      struct.setMember_nameIsSet(true);
      struct.member_ip = iprot.readString();
      struct.setMember_ipIsSet(true);
      struct.member_port = iprot.readI32();
      struct.setMember_portIsSet(true);
      struct.member_heartbeat = iprot.readI64();
      struct.setMember_heartbeatIsSet(true);
    }
  }

}

